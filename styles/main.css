/* --- ARQUITETURA DE ESTILOS --- */
/* Este arquivo é o ponto de entrada único (entrypoint) para todos os estilos da aplicação.
 * Ele não contém regras de estilo próprias, apenas importa os módulos CSS na ordem correta.
 * A ordem de importação é CRÍTICA, pois o CSS é uma cascata: regras importadas
 * primeiro podem ser sobrescritas por regras importadas posteriormente. A estrutura segue
 * do mais genérico para o mais específico. */

/* --- FONT DEFINITIONS --- */
/* 1. Tipografia Base: Carrega a família de fontes "Inter" a partir de um CDN.
 * É o primeiro passo para garantir uma base tipográfica consistente em toda a UI antes
 * que qualquer outra regra de estilo seja aplicada. */
@import url("https://rsms.me/inter/inter.css");

/* --- CORE STYLES (FUNDAÇÃO) --- */
/* Esta seção estabelece as fundações visuais da aplicação. Os arquivos aqui definem
 * as regras globais e os elementos de layout que servem de base para todo o resto. */

/* 2. base.css: A base de todo o sistema de design.
 *  - Define variáveis CSS globais no seletor :root (ex: --bg-primary, --text-accent).
 *    Isso cria um sistema de "design tokens" para consistência em cores, espaçamentos, etc.
 *  - Aplica um "reset" de CSS para remover estilos padrão dos navegadores.
 *  - Define estilos globais para as tags <html>, <body> e para a barra de rolagem.
 *  DEVE ser o primeiro arquivo de estilo local para que as variáveis estejam
 *  disponíveis para todos os outros módulos. */
@import url("base.css");

/* 3. layout.css: Define a macroestrutura da aplicação.
 *  - Cria o layout principal em grid (ex: .app-container).
 *  - Estiliza os containers de alto nível, como a barra lateral (.sidebar) e a área
 *    de conteúdo principal (.main-content, .main-header).
 *  - Depende de `base.css` para usar as variáveis de cor e espaçamento. */
@import url("layout.css");

/* 4. components.css: Estiliza os blocos de construção (building blocks) da UI.
 *  - Contém estilos para elementos reutilizáveis que aparecem em múltiplas telas.
 *  - Exemplos: .action-button, .action-input, .panel, .section-title.
 *  - Mantém a UI consistente, garantindo que um botão, por exemplo, tenha sempre a mesma
 *    aparência, não importa onde seja usado. */
@import url("components.css");

/* 5. navigation.css: Controla a lógica de navegação entre as diferentes views.
 *  - Utiliza seletores de atributo (ex: [data-menu].menu--visible) para gerenciar
 *    a visibilidade e as transições de opacidade dos menus quando o usuário
 *    navega entre as telas. */
@import url("navigation.css");

 /* --- VIEW-SPECIFIC STYLES (MÓDULOS DE TELA) --- */
/* Estilos que se aplicam a seções ou "views" específicas da aplicação. São carregados
 * após o core para que possam sobrescrever estilos base se necessário. */

/* 6. management.css: Estilos para a tela de "Gerenciamento".
 *  - É a view principal para organizar torrents, arquivos e mídias.
 *  - Contém regras para listas (.torrent-list), itens arrastáveis (.file-item-row),
 *    zonas de soltar (.drop-zone) e formulários de organização de mídia.
 *  - É o maior módulo de estilo por ser a tela mais complexa. */
@import url("management.css");

/* 7. settings.css: Estilos para a página de "Configurações".
 *  - Estiliza o dashboard de informações do usuário (.user-dashboard), gráficos
 *    de tráfego, formulários de API (.input-with-status) e outras opções. */
@import url("settings.css");

/* 8. api-explorer.css: Estiliza a ferramenta de "API Explorer".
 *  - Uma view de utilidade para desenvolvedores testarem e depurarem chamadas de API.
 *  - Formata a exibição de respostas em JSON (.api-response-content). */
@import url("api-explorer.css");
